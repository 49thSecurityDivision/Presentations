# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "elrey741/kali-light-linux_amd64"

  # making a modification to load a Vagrantfile.local if it exists
  #   this will let me add local modifications if I need to outside of this repo
  # https://stackoverflow.com/a/53490858
  local_mods = './Vagrantfile.local'
  # https://stackoverflow.com/a/35769926
  eval File.read(local_mods) if File.exists?(local_mods)

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.5"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network",
  #   bridge: [
  #     "wlp2s0" # adding to ensure I pull a work ip and bypass Pi-Hole
  #     # "enp4s0",
  #     # "en0",
  #     # "enx8cae4cee6607"
  #   ]

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.provider :libvirt do |v, override|
    v.memory = 4096
    v.cpus = 2
    v.graphics_type = "spice"
    v.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'
    v.redirdev :type => "spicevmc"
    override.vm.allowed_synced_folder_types = [:libvirt, :nfs]
    override.vm.synced_folder ".", "/vagrant", nfs_udp: false
  end
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb, override|
  # Display the VirtualBox GUI when booting the machine
  # vb.gui = true

    # Customize the amount of memory on the VM:
    vb.cpus = "2"

    # Customize the amount of memory on the VM:
    vb.memory = "4096"

    # add bi-directional clipboard support (when forwarding X11)
    # pre-vbox 6.1
    # vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
    # post-vbox 6.1
    vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end

  config.vm.provision "shell", inline: <<-SHELL
    set -x
    sudo apt-get update
    # for pyenv
    sudo apt-get install make build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
    curl -fsSL 'https://pyenv.run/' | sudo -u vagrant bash
    grep -q 'pyenv' ~vagrant/.zshrc || printf 'export PYENV_ROOT="$HOME/.pyenv"\ncommand -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"\neval "$(pyenv init -)"\n' >> ~vagrant/.zshrc

    # terraform/pipenv
    export DEBUG=true
    curl -fsSL 'https://git.io/JtVlq' | sudo bash
    sudo apt-get install -y terraform python3-pip vim
    sudo pip3 install pipenv
  SHELL
end